import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'org.beryx.jlink' version '3.0.0'

    id 'idea' // fix running via IntelliJ
}
idea.module.outputDir file("out/production/classes") // fix running via IntelliJ

repositories {
    mavenCentral()
}

version = '1.0'
java.toolchain.languageVersion = JavaLanguageVersion.of(21)

application {
    mainModule = 'samplerecorder'
    mainClass = 'airsquared.samplerecorder.app.Main'
    applicationDefaultJvmArgs.addAll '--add-opens', 'java.base/java.lang.reflect=com.jfoenix'
}

javafx {
    version = '21'
    modules = [ 'javafx.controls', 'javafx.fxml' ]
}

dependencies {
    implementation 'com.jfoenix:jfoenix:9.0.10'
    implementation 'org.kordamp.ikonli:ikonli-javafx:12.3.1'
    implementation 'org.kordamp.ikonli:ikonli-material2-pack:12.3.1'
    implementation 'fr.brouillard.oss:cssfx:11.4.0'
}

jlink {
    addOptions '--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages', '--strip-native-commands',
            '--dedup-legal-notices=error-if-not-same-content'
    launcher {
        noConsole = true
    }
    jpackage {
        vendor = 'ApexAI'
        installerOutputDir = file("${layout.buildDirectory.get()}/distributions/")
        var os = org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.currentOperatingSystem
        if (os.macOsX) {
            icon = "${projectDir}/dist/icon.icns"
        } else {
            icon = "${projectDir}/dist/icon-512.png"
        }

        if (DefaultNativePlatform.currentOperatingSystem.isMacOsX()) {
            installerType = "dmg"
        } else if (DefaultNativePlatform.currentOperatingSystem.isWindows()) {
            installerOptions.addAll '--win-dir-chooser', '--win-menu', '--win-shortcut'
            installerType = "msi"
        } else {
            installerOptions.addAll '--linux-shortcut', '--linux-menu-group', 'Audio;Utility;Java',
                    '--linux-rpm-license-type', 'GPLv3'
        }
    }
}
startScripts.enabled = distZip.enabled = distTar.enabled = false
assemble.dependsOn jpackage

if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}